package Tree;

public class TreeNode {
	private String computerName;

	private int[] malwareAnalyses; // This instance variable belongs to detector work that lies outside the scope of the project.

	private TreeNode parent; 

	private TreeNode leftChild;

	private TreeNode rightChild;
	
	// Precondition: None.
	// Postcondition: A new node is created for a computer in the large enterprise network, 
	//                and its instance variables are initialized.
	//
	public TreeNode(String computerNameValue, TreeNode parentValue, TreeNode leftChildValue, TreeNode rightChildValue)
	{
	    // Implement me.
		this.computerName = computerNameValue;
		this.parent = parentValue;
		this.leftChild = leftChildValue;
		this.rightChild = rightChildValue;
	}
	
	
	// Precondition: currentNode is an existent node in the binary search tree.
	// Postcondition: newNode is inserted in the binary search tree.  
	//                The revised tree satisfies the binary search tree property.
	//
	public void insertNewNode(TreeNode currentNode, TreeNode newNode)   
	{
		// Implement me.
		String currentComputerName = currentNode.computerName;
		String newComputerName = newNode.computerName;
		int strCompare = currentComputerName.compareToIgnoreCase(newComputerName);
		
		if(strCompare == 0) {
			System.out.println("There is already a node with this search key");
			return;
		}
		if(strCompare < 0) {
			if(currentNode.rightChild != null) {
				insertNewNode(currentNode.rightChild, newNode);
			} else {
				newNode.parent = currentNode;
				currentNode.rightChild = newNode;
			}
		} else {
			if(currentNode.leftChild != null) {
				insertNewNode(currentNode.leftChild, newNode);
			} else {
				newNode.parent = currentNode;
				currentNode.leftChild = newNode;
			}
		}
			    
	}
	
	
	// Precondition: currentNode is an existent node in the binary search tree.
	// Postcondition: The tree is walked in order to display the keys of its nodes.  
	//                The walk starts at currentNode.
	//
	public TreeNode analyzeInOrder(TreeNode currentNode)   
	{
	   // Implement me. 
		if (currentNode != null) {
			analyzeInOrder(currentNode.leftChild);
			System.out.println("Analyzing: " + currentNode.computerName + "\n");
			analyzeInOrder(currentNode.rightChild);
		}
		return null;
	}

	
	// Precondition: currentNode is an existent node in the binary search tree.
	// Postcondition: The tree is walked in pre-order to display the keys of its nodes.  
	//                The walk starts at currentNode.
	// 
	public TreeNode analyzeInPreOrder(TreeNode currentNode)   
	{
	   // Implement me. 
		if(currentNode != null) {
			System.out.println("Analyzing: " + currentNode.computerName + "\n");
			analyzeInPreOrder(currentNode.leftChild);
			analyzeInPreOrder(currentNode.rightChild);
		}
		return null;
	}
	
	
	// Precondition: currentNode is an existent node in the binary search tree.
	// Postcondition: The tree is walked in post-order to display the keys of its nodes.  
	//                The walk starts at currentNode.
	//               
	public TreeNode analyzeInPostOrder(TreeNode currentNode)   
	{
	   // Implement me. 
		if(currentNode != null) {
			analyzeInPostOrder(currentNode.leftChild);
			analyzeInPostOrder(currentNode.rightChild);
			System.out.println("Analyzing: " + currentNode.computerName + "\n");
		}
		return null;
	}
}
